{"version":3,"file":"static/js/917.23b72c75.chunk.js","mappings":"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","sources":["components/Form/Form.jsx","components/Filter/Filter.jsx","components/List/List.jsx","components/Modal/modal.styled.js","components/Modal/ModalEdit.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Outlet } from 'react-router-dom';\nimport { addContact } from 'redax/operation';\nimport { selectFilteredContacts } from 'redax/selectors';\n\nconst FormContact = () => {\n  const dispatch = useDispatch();\n  const items = useSelector(selectFilteredContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const {\n      elements: { name, number },\n    } = e.target;\n    const nameUser = items.find(\n      item => item.name === name.value ?? item.number === number.value\n    );\n    if (nameUser) {\n      return alert(`${nameUser.name} alredy have`);\n    }\n    dispatch(\n      addContact({\n        name: name.value,\n        number: number.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <form onSubmit={handleSubmit}>\n        <div\n          style={{\n            marginBottom: '10px',\n          }}\n        >\n          <label\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n            }}\n          >\n            Name\n            <input\n              style={{\n                width: '200px',\n                marginTop: '5px',\n              }}\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </label>\n        </div>\n        <div style={{ marginBottom: '10px' }}>\n          <label\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n            }}\n          >\n            Number\n            <input\n              style={{\n                width: '200px',\n                marginTop: '5px',\n              }}\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </label>\n        </div>\n        <button type=\"submit\" style={{ marginBottom: '10px' }}>\n          Add Contact\n        </button>\n      </form>\n      <Outlet />\n    </div>\n  );\n};\n\nFormContact.propTypes = {\n  lable: PropTypes.string,\n};\n\nexport default FormContact;\n","import { selectStatusFilter } from 'redax/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterContacts } from 'redax/filterSlise';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const contactsFilter = useSelector(selectStatusFilter);\n\n  const handleFilter = e => {\n    const search = e.target.value;\n    dispatch(filterContacts(search));\n  };\n  return (\n    <label\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      Find contact by name\n      <input\n        style={{\n          width: '200px',\n          marginTop: '5px',\n        }}\n        type=\"text\"\n        name=\"filter\"\n        value={contactsFilter}\n        onChange={handleFilter}\n      />\n    </label>\n  );\n}\n\nexport default Filter;\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { removeContact, fetchContacts } from 'redax/operation';\nimport { editContact } from 'redax/modalSlice';\nimport { selectFilteredContacts, selectModalContact } from 'redax/selectors';\n\nconst ListContacts = () => {\n  const dispatch = useDispatch();\n  const items = useSelector(selectFilteredContacts);\n  const modalDataContact = useSelector(selectModalContact);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch, modalDataContact]);\n\n  const deleteContact = id => {\n    return dispatch(removeContact(id));\n  };\n\n  const editContactData = id => {\n    const dataContact = items.find(item => item.id === id);\n    dispatch(editContact(dataContact));\n  };\n\n  const user = items.map(({ id, name, number }) => {\n    return (\n      <li\n        key={id}\n        style={{\n          marginBottom: '10px',\n        }}\n      >\n        {name}: {number}\n        <button\n          type=\"button\"\n          onClick={() => editContactData(id)}\n          style={{\n            marginLeft: '5px',\n          }}\n        >\n          Edit\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => deleteContact(id)}\n          style={{\n            marginLeft: '5px',\n          }}\n        >\n          Delete\n        </button>\n      </li>\n    );\n  });\n\n  return (\n    <>\n      <h2>Contacts</h2>\n      <ul>{user}</ul>\n    </>\n  );\n};\n\nexport default ListContacts;\n\nListContacts.propTypes = {\n  arrayContacts: PropTypes.array,\n  button: PropTypes.element,\n};\n","import styled from \"@emotion/styled\";\n\nexport const Overlay = styled.div`\n    position: fixed;\n    width: 100vw;\n    height: 100vh;\n    background-color: rgba(0, 0, 0, 0.3);\n    top: 0;\n    left: 0;\n`;\n\nexport const FormModal = styled.form`\n    position: absolute;\n    top: 200px;\n    left: 200px;\n    padding: 20px;\n    background-color: pink;\n    border-radius: 10px;\n    box-shadow: inset 0 -3em 3em rgba(0,0,0,0.1),\n             0.3em 0.3em 1em rgba(0,0,0,0.3);\n`\n\nexport const InputForm = styled.input`\n    border-radius: 5px;\n    border-color: rgba(150, 150, 150, 0.7);\n    background-color: rgba(200, 200, 200, 0.3);  \n`","import { createPortal } from 'react-dom';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectModalContact } from 'redax/selectors';\nimport { editContact } from 'redax/modalSlice';\nimport { patchContact } from 'redax/operation';\nimport { Overlay, FormModal, InputForm } from './modal.styled';\n\nexport const ModalEdit = () => {\n  const overlay = document.getElementById('popup-root');\n  const dispatch = useDispatch();\n  const modalDataContact = useSelector(selectModalContact);\n\n  useEffect(() => {\n    window.addEventListener('keydown', onCloseEscape);\n\n    return () => {\n      window.removeEventListener('keydown', onCloseEscape);\n    };\n  });\n\n  const closeModal = () => {\n    dispatch(editContact(null));\n  };\n\n  const onCloseEscape = e => {\n    if (e.code === 'Escape') {\n      closeModal();\n    }\n  };\n\n  const onCloseClickBackdrop = e => {\n    if (e.currentTarget === e.target) {\n      closeModal();\n    }\n  };\n\n  const handleEdit = e => {\n    e.preventDefault();\n    const form = e.target;\n    // const {\n    //   elements: { name, number },\n    // } = e.target;\n    dispatch(patchContact(modalDataContact.id), {\n      name: modalDataContact.name,\n      number: modalDataContact.number,\n    });\n    closeModal();\n    form.reset();\n  };\n\n  return createPortal(\n    <Overlay onClick={onCloseClickBackdrop}>\n      <FormModal onSubmit={handleEdit}>\n        <div\n          style={{\n            marginBottom: '10px',\n          }}\n        >\n          <label\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n            }}\n          >\n            Name\n            <InputForm\n              style={{\n                width: '200px',\n                marginTop: '5px',\n              }}\n              type=\"text\"\n              name=\"name\"\n              onChange={e =>\n                dispatch(\n                  editContact({\n                    id: modalDataContact.id,\n                    name: e.target.value,\n                    number: modalDataContact.number,\n                  })\n                )\n              }\n              value={modalDataContact.name}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </label>\n        </div>\n        <div style={{ marginBottom: '10px' }}>\n          <label\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n            }}\n          >\n            Number\n            <InputForm\n              style={{\n                width: '200px',\n                marginTop: '5px',\n              }}\n              type=\"tel\"\n              name=\"number\"\n              onChange={e =>\n                dispatch(\n                  editContact({\n                    id: modalDataContact.id,\n                    name: modalDataContact.name,\n                    number: e.target.value,\n                  })\n                )\n              }\n              value={modalDataContact.number}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </label>\n        </div>\n        <button type=\"submit\" style={{ marginBottom: '10px' }}>\n          Edit Contact\n        </button>\n      </FormModal>\n    </Overlay>,\n    overlay\n  );\n};\n","import FormContact from 'components/Form/Form';\nimport Filter from 'components/Filter/Filter';\nimport ListContacts from 'components/List/List';\nimport { useSelector } from 'react-redux';\nimport { selectModalOpen, selectModalContact } from 'redax/selectors';\nimport { ModalEdit } from 'components/Modal/ModalEdit';\n\nconst Contacts = () => {\n  const closeModal = useSelector(selectModalOpen);\n  const openModal = useSelector(selectModalContact);\n\n  return (\n    <>\n      <FormContact />\n      <Filter />\n      <ListContacts />\n      {openModal ? <ModalEdit /> : closeModal}\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["dispatch","useDispatch","items","useSelector","selectFilteredContacts","onSubmit","e","preventDefault","form","target","elements","name","number","nameUser","find","item","value","alert","addContact","reset","style","marginBottom","display","flexDirection","width","marginTop","type","pattern","title","required","contactsFilter","selectStatusFilter","onChange","search","filterContacts","modalDataContact","selectModalContact","useEffect","fetchContacts","user","map","id","onClick","dataContact","editContact","editContactData","marginLeft","removeContact","deleteContact","Overlay","styled","FormModal","InputForm","ModalEdit","overlay","document","getElementById","window","addEventListener","onCloseEscape","removeEventListener","closeModal","code","createPortal","currentTarget","patchContact","selectModalOpen","openModal","Form","List"],"sourceRoot":""}